import java.io.*;import java.util.*;public class DataManager{	public static int NWIDX = 0;	public static int LDIDX = 1;	private HashMap<Kingdom, Integer[]> database;	private HashMap<Kingdom, Kingdom> kingdoms;		public DataManager()	{		database = new HashMap();		kingdoms = new HashMap();		readFile();	}		public void readFile()	{		Scanner s = null;		try		{			s = new Scanner(new File("data"));		}		catch(Exception e)		{			try			{				File f = new File("data");				f.createNewFile();				return;			}			catch(Exception ee)			{				System.out.println("File could not be created");				System.exit(0);			}		}				while(s.hasNextLine())		{			String nextLine = s.nextLine();			try			{				Kingdom add = new Kingdom(nextLine);				kingdoms.put(add, add);			}			catch(Exception e)			{				System.out.println(nextLine + "not a kingdom");			}		}		s.close();	}		public void importData(Kingdom k)	{		if(kingdoms.containsKey(k))		{			Integer[] changes = new Integer[2];			changes[NWIDX] = kingdoms.get(k).nwChange(k);			changes[LDIDX] = kingdoms.get(k).ldChange(k);			database.remove(k);			database.put(k, changes);			kingdoms.put(k, k);		}		else		{			kingdoms.put(k, k);		}	}		public void writeFile()	{		PrintStream ps = null;		try		{			ps = new PrintStream(new File("data"));		}		catch(Exception e)		{			System.out.println("File not found");			File f = new File("data");			try			{				f.createNewFile();			}			catch(Exception ee)			{				System.out.println("File could not be created");				System.exit(0);			}			writeFile();			return;		}				for(Kingdom k : database.keySet())		{			ps.println(k.getRaw());		}		ps.close();	}		//change in nw, name, realm, networth, race, land	public ArrayList<String> getData()	{		Comparator<Map.Entry<Kingdom, Integer[]>> comp = new Comparator<Map.Entry<Kingdom, Integer[]>>()		{			public int compare(Map.Entry<Kingdom, Integer[]> a, Map.Entry<Kingdom, Integer[]> b)			{				return a.getValue()[NWIDX].compareTo(b.getValue()[NWIDX]);			}		};		Map.Entry<Kingdom, Integer[]>[] dataArr = new Map.Entry[1];		dataArr = (Map.Entry<Kingdom, Integer[]>[])(database.entrySet().toArray(dataArr));		Arrays.sort(dataArr, comp);		ArrayList<String> temp = new ArrayList();		for(int i = 0; i < dataArr.length; i++)		{			Map.Entry<Kingdom, Integer[]> currEntry = dataArr[i];			if(true || currEntry.getValue()[NWIDX] != 0)			{				StringBuffer sb = new StringBuffer();				sb.append(currEntry.getValue()[NWIDX]+" ");				sb.append("("+currEntry.getValue()[LDIDX]+") ");				sb.append(currEntry.getKey().toString());				temp.add(sb.toString());			}		}		return temp;	}}